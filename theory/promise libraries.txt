PROMISE LIBRARIES:
->Q and bluebird are the different promise libraries.
Native promises have very basic features. Libraries like Q or Bluebird add a bunch more. If you need those features then use those libraries. 

Bluebird:Bluebird is a fully-featured Promise library for JavaScript. The strongest feature of Bluebird is that it allows you to "promisify" other Node modules in order to use them asynchronously. Promisify is a concept applied to callback functions.
	const Promise = require('bluebird');
	const fs = Promise.promisifyAll(require('fs'));

	fs.readFileAsync('somefile.text').then(function(data) {
   	// do something with data here
	});

Q:A service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing. This is a Promises/A+-compliant implementation of promises/deferred objects inspired by Kris Kowal's Q.
	var Q = require('q');

	function async() {
	return Q.delay(4000)
	}

	async()
	.then(function() {
	console.log('async called back');
	});
	O/p: async called back//after 4 secs output displayed.